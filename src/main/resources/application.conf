exercise {
  parsing {
    action = "process"                            // [process|generate]
    generate-number-of-lines = 100000             // for generate only
    loop-count = 1                                // for process only
    name-length-minimal = 7
    file-processor = "scala-source"               // [nio|scala-source]
    line-processor = "low-level-optimized"        // [regex|regex-validate|low-level-optimized]
    encoding = "UTF-8"
    linePattern = "^[-\\w' ]+,\\s(?:Male|Female),\\s(\\d{2}/\\d{2}/\\d{2})$"
    delimiterRegex = ",\\s"
    delimiter = ", "
    datePattern = "dd/MM/yy"
    dateDelimiter = "/"
  }
}
// (1) address book file generation:
// generate <pathname> <number-of-lines> <minimal-length-of-name>
//
// (2) address book file processing:
// process <pathname> <loop-count> [nio|scala-source] [regex|regex-validate|low-level-optimized]
//
// key:
// action ................... process or generate
// generate-number-of-lines . how many lines the generator should create
// pathname ................. pathname of the address book file (either to be generated or read)
// loop-count ............... how many times the address book parsing will be done
// number-of-lines .......... number of lines of the generated address book file
// name-length-minimal ...... minimal lenght of generated name (both first name and surname)
// loop-count ............... defines how many times the processor will process the address book file
// nio ...................... read the address book file using Java NIO
// scala-source ............. read the address book file using Scala io.Source
// regex .................... parse the address book using Java regular expressions
// regex-validate ........... parse and validate the address book using Java regular expressions
// low-level-optimized ...... parse the address book using fast low-level custom code; no validation
// encoding ................. e.g. UTF-8
// linePattern .............. regex to match the address book line entry
// delimiterRegex ........... delimiter between line tokens as regex
// delimiter ................ delimiter between line tokens as string
// datePattern .............. regex to match birth date
// dateDelimiter ............ character delimiting day, month and year
